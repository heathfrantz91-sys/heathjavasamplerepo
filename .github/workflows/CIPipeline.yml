name: CI Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1
  ECR_REPO_NAME: heathjavasamplerepo
  ECR_REPO_URI_FINAL: 345594588963.dkr.ecr.us-east-1.amazonaws.com
  IMAGE_TAG: ${{ github.run_number }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: 🔄 Checkout Code
        uses: actions/checkout@v3

      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: 📦 Build with Maven
        run: ./mvnw clean package

      - name: 🛡️ Run OWASP Dependency-Check
        env:
          NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
        run: |
          curl -L https://github.com/jeremylong/DependencyCheck/releases/download/v9.0.9/dependency-check-9.0.9-release.zip -o dc.zip
          unzip dc.zip -d dependency-check
          chmod +x dependency-check/dependency-check/bin/dependency-check.sh
          ./dependency-check/dependency-check/bin/dependency-check.sh \
            --project "heathjavasamplerepo" \
            --scan ./target \
            --format ALL \
            --out dependency-check-report \
            --failOnCVSS 7.0 \
            --nvdApiKey "$NVD_API_KEY" \
            --nvdApiDelay 8000
        continue-on-error: true  # Optional: Let it run even on failure

      - name: 📤 Upload Dependency-Check Report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: dependency-check-report

      - name: 📊 SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./mvnw clean verify sonar:sonar \
            -Dsonar.projectKey=heathjavasamplerepo \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      # GitHub doesn't have native waitForQualityGate — usually handled by SonarQube CLI if needed.

      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔐 Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: 📦 Ensure ECR Repository Exists
        run: |
          aws ecr describe-repositories --repository-names $ECR_REPO_NAME || \
          aws ecr create-repository --repository-name $ECR_REPO_NAME

      - name: 🐳 Build Docker Image
        run: |
          echo "🐳 Building Docker image with tag: $IMAGE_TAG"
          docker build -t $ECR_REPO_URI_FINAL/$ECR_REPO_NAME:$IMAGE_TAG .

      - name: 📤 Push Docker Image to ECR
        run: |
          echo "📤 Pushing Docker image to: $ECR_REPO_NAME:$IMAGE_TAG"
          docker push $ECR_REPO_URI_FINAL/$ECR_REPO_NAME:$IMAGE_TAG

      - name: 🚀 Trigger CD Pipeline (if applicable)
        if: success()
        run: |
          echo "This is where you would trigger your CD pipeline."
          # Example: curl to webhook or dispatch GitHub Action
